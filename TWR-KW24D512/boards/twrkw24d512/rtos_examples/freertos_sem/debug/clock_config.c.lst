###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         03/Mar/2020  16:31:37
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Other_Code_Repo\CMake_IAR_Template\TWR-KW24D512\boards\twrkw24d512\rtos_examples\freertos_sem\clock_config.c
#    Command line =  
#        C:\Other_Code_Repo\CMake_IAR_Template\TWR-KW24D512\boards\twrkw24d512\rtos_examples\freertos_sem\clock_config.c
#        "-IC:\Program Files (x86)\IAR Systems\Embedded Workbench 8.1\arm\inc"
#        -I..\..\..\..\..\CMSIS\Include -I..\..\..\..\..\devices -I..\..\..
#        -I..\..\..\..\..\devices\MKW24D5\drivers
#        -I..\..\..\..\..\devices\MKW24D5\utilities
#        -I..\..\..\..\..\devices\MKW24D5 -I..\..\iar -I..\.. -I..\
#        -I..\..\..\..\..\rtos\freertos_9.0.0\Source\portable\IAR\ARM_CM3
#        -I..\..\..\..\..\rtos\freertos_9.0.0\Source\include
#        -DCPU_MKW24D512VHA5 -DIAR -DFSL_RTOS_FREE_RTOS -DPRINTF_FLOAT_ENABLE=0
#        -DSCANF_FLOAT_ENABLE=0 -DPRINTF_ADVANCED_ENABLE=0
#        -DSCANF_ADVANCED_ENABLE=0 -DTWR_KW24D512 -DTOWER --diag_suppress
#        Pa082,Pa050,Pe167,Pa182 --endian=little --cpu=Cortex-M4 --fpu=None
#        --no_path_in_file_macros --silent -lC . -e --dlib_config "C:/Program
#        Files (x86)/IAR Systems/Embedded Workbench
#        8.1/arm/inc/c/DLib_Config_Normal.h" -Om --debug --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --dependencies=ns CMakeFiles\freertos_sem.dir\clock_config.c.obj.d -o
#        CMakeFiles\freertos_sem.dir\clock_config.c.obj
#    Locale       =  C
#    List file    =  .\clock_config.c.lst
#    Object file  =  CMakeFiles\freertos_sem.dir\clock_config.c.obj
#
###############################################################################

C:\Other_Code_Repo\CMake_IAR_Template\TWR-KW24D512\boards\twrkw24d512\rtos_examples\freertos_sem\clock_config.c
      1          /*
      2           * Copyright (c) 2015, Freescale Semiconductor, Inc.
      3           * Copyright 2016-2017 NXP
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of the copyright holder nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          /*
     32           * How to setup clock using clock driver functions:
     33           *
     34           * 1. CLOCK_SetSimSafeDivs, to make sure core clock, bus clock, flexbus clock
     35           *    and flash clock are in allowed range during clock mode switch.
     36           *
     37           * 2. Call CLOCK_Osc0Init to setup OSC clock, if it is used in target mode.
     38           *
     39           * 3. Set MCG configuration, MCG includes three parts: FLL clock, PLL clock and
     40           *    internal reference clock(MCGIRCLK). Follow the steps to setup:
     41           *
     42           *    1). Call CLOCK_BootToXxxMode to set MCG to target mode.
     43           *
     44           *    2). If target mode is FBI/BLPI/PBI mode, the MCGIRCLK has been configured
     45           *        correctly. For other modes, need to call CLOCK_SetInternalRefClkConfig
     46           *        explicitly to setup MCGIRCLK.
     47           *
     48           *    3). Don't need to configure FLL explicitly, because if target mode is FLL
     49           *        mode, then FLL has been configured by the function CLOCK_BootToXxxMode,
     50           *        if the target mode is not FLL mode, the FLL is disabled.
     51           *
     52           *    4). If target mode is PEE/PBE/PEI/PBI mode, then the related PLL has been
     53           *        setup by CLOCK_BootToXxxMode. In FBE/FBI/FEE/FBE mode, the PLL could
     54           *        be enabled independently, call CLOCK_EnablePll0 explicitly in this case.
     55           *
     56           * 4. Call CLOCK_SetSimConfig to set the clock configuration in SIM.
     57           */
     58          
     59          /* TEXT BELOW IS USED AS SETTING FOR THE CLOCKS TOOL *****************************
     60          !!ClocksProfile
     61          product: Clocks v1.0
     62          processor: MKW24D512xxx5
     63          package_id: MKW24D512VHA5
     64          mcu_data: ksdk2_0
     65          processor_version: 0.2.6
     66           * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR THE CLOCKS TOOL **/
     67          
     68          #include "fsl_smc.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void CLOCK_SetSimSafeDivs(void)
   \                     CLOCK_SetSimSafeDivs: (+1)
   \        0x0   0xF44F 0x3080      MOV      R0,#+65536
   \        0x4   0x....             LDR.N    R1,??DataTable4  ;; 0x40048044
   \        0x6   0x6008             STR      R0,[R1, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void CLOCK_SetXtal0Freq(uint32_t)
   \                     CLOCK_SetXtal0Freq: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4_1
   \        0x2   0x6008             STR      R0,[R1, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SMC_SetPowerModeProtection(SMC_Type *, uint8_t)
   \                     SMC_SetPowerModeProtection: (+1)
   \        0x0   0x7001             STRB     R1,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp smc_power_state_t SMC_GetPowerModeState(SMC_Type *)
   \                     SMC_GetPowerModeState: (+1)
   \        0x0   0x78C0             LDRB     R0,[R0, #+3]
   \        0x2   0x4770             BX       LR               ;; return
     69          #include "clock_config.h"
     70          
     71          /*******************************************************************************
     72           * Definitions
     73           ******************************************************************************/
     74          #define MCG_PLL_DISABLE                                   0U  /*!< MCGPLLCLK disabled */
     75          #define OSC_CAP0P                                         0U  /*!< Oscillator 0pF capacitor load */
     76          #define OSC_ER_CLK_DISABLE                                0U  /*!< Disable external reference clock */
     77          #define SIM_OSC32KSEL_RTC32KCLK_CLK                       2U  /*!< OSC32KSEL select: RTC32KCLK clock (32.768kHz) */
     78          #define SIM_PLLFLLSEL_MCGFLLCLK_CLK                       0U  /*!< PLLFLL select: MCGFLLCLK clock */
     79          #define SIM_PLLFLLSEL_MCGPLLCLK_CLK                       1U  /*!< PLLFLL select: MCGPLLCLK clock */
     80          
     81          /*******************************************************************************
     82           * Variables
     83           ******************************************************************************/
     84          /* System clock frequency. */
     85          extern uint32_t SystemCoreClock;
     86          
     87          /*******************************************************************************
     88           * Code
     89           ******************************************************************************/
     90          /* User function which configures Modem CLK_OUT clock. */
     91          extern void setModemClock(void);
     92          
     93          /*FUNCTION**********************************************************************
     94           *
     95           * Function Name : CLOCK_CONFIG_SetFllExtRefDiv
     96           * Description   : Configure FLL external reference divider (FRDIV).
     97           * Param frdiv   : The value to set FRDIV.
     98           *
     99           *END**************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    100          static void CLOCK_CONFIG_SetFllExtRefDiv(uint8_t frdiv)
    101          {
    102              MCG->C1 = ((MCG->C1 & ~MCG_C1_FRDIV_MASK) | MCG_C1_FRDIV(frdiv));
   \                     CLOCK_CONFIG_SetFllExtRefDiv: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40064000
   \        0x2   0x780A             LDRB     R2,[R1, #+0]
   \        0x4   0xF002 0x02C7      AND      R2,R2,#0xC7
   \        0x8   0x00C0             LSLS     R0,R0,#+3
   \        0xA   0xF000 0x0038      AND      R0,R0,#0x38
   \        0xE   0x4310             ORRS     R0,R0,R2
   \       0x10   0x7008             STRB     R0,[R1, #+0]
    103          }
   \       0x12   0x4770             BX       LR               ;; return
    104          
    105          /*******************************************************************************
    106           ********************** Configuration BOARD_BootClockRUN ***********************
    107           ******************************************************************************/
    108          /* TEXT BELOW IS USED AS SETTING FOR THE CLOCKS TOOL *****************************
    109          !!Configuration
    110          name: BOARD_BootClockRUN
    111          outputs:
    112          - {id: Bus_clock.outFreq, value: 48 MHz}
    113          - {id: Core_clock.outFreq, value: 48 MHz}
    114          - {id: Flash_clock.outFreq, value: 24 MHz}
    115          - {id: LPO_clock.outFreq, value: 1 kHz}
    116          - {id: MCGFFCLK.outFreq, value: 125 kHz}
    117          - {id: MCGIRCLK.outFreq, value: 32.768 kHz}
    118          - {id: OSCERCLK.outFreq, value: 4 MHz}
    119          - {id: PLLFLLCLK.outFreq, value: 48 MHz}
    120          - {id: System_clock.outFreq, value: 48 MHz}
    121          settings:
    122          - {id: MCGMode, value: PEE}
    123          - {id: ModemInitConfig, value: user_code}
    124          - {id: CLKOUTConfig, value: 'yes'}
    125          - {id: MCG.FCRDIV.scale, value: '1', locked: true}
    126          - {id: MCG.FRDIV.scale, value: '32'}
    127          - {id: MCG.IREFS.sel, value: MCG.FRDIV}
    128          - {id: MCG.PLLS.sel, value: MCG.PLL}
    129          - {id: MCG.PRDIV.scale, value: '2'}
    130          - {id: MCG_C1_IRCLKEN_CFG, value: Enabled}
    131          - {id: MCG_C2_OSC_MODE_CFG, value: ModeOscLowPower}
    132          - {id: MCG_C2_RANGE0_CFG, value: High}
    133          - {id: MCG_C2_RANGE0_FRDIV_CFG, value: High}
    134          - {id: OSC_CR_ERCLKEN_CFG, value: Enabled}
    135          - {id: OSC_CR_EREFSTEN_CFG, value: Enabled}
    136          - {id: RTC_CR_OSCE_CFG, value: Enabled}
    137          - {id: SIM.OSC32KSEL.sel, value: RTC.RTC32KCLK}
    138          - {id: SIM.OUTDIV4.scale, value: '2', locked: true}
    139          - {id: SIM.PLLFLLSEL.sel, value: MCG.MCGPLLCLK}
    140          sources:
    141          - {id: OSC.OSC.outFreq, value: 4 MHz, enabled: true}
    142           * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR THE CLOCKS TOOL **/
    143          
    144          /*******************************************************************************
    145           * Variables for BOARD_BootClockRUN configuration
    146           ******************************************************************************/

   \                                 In section .rodata, align 4
    147          const mcg_config_t mcgConfig_BOARD_BootClockRUN =
   \                     mcgConfig_BOARD_BootClockRUN:
   \        0x0   0x07 0x02          DC8 7, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x00 0x00    
    148              {
    149                  .mcgMode = kMCG_ModePEE,                  /* PEE - PLL Engaged External */
    150                  .irclkEnableMode = kMCG_IrclkEnable,      /* MCGIRCLK enabled, MCGIRCLK disabled in STOP mode */
    151                  .ircs = kMCG_IrcSlow,                     /* Slow internal reference clock selected */
    152                  .fcrdiv = 0x0U,                           /* Fast IRC divider: divided by 1 */
    153                  .frdiv = 0x0U,                            /* FLL reference clock divider: divided by 32 */
    154                  .drs = kMCG_DrsLow,                       /* Low frequency range */
    155                  .dmx32 = kMCG_Dmx32Default,               /* DCO has a default range of 25% */
    156                  .oscsel = kMCG_OscselOsc,                 /* Selects System Oscillator (OSCCLK) */
    157                  .pll0Config =
    158                      {
    159                          .enableMode = MCG_PLL_DISABLE,    /* MCGPLLCLK disabled */
    160                          .prdiv = 0x1U,                    /* PLL Reference divider: divided by 2 */
    161                          .vdiv = 0x0U,                     /* VCO divider: multiplied by 24 */
    162                      },
    163              };

   \                                 In section .rodata, align 4
    164          const sim_clock_config_t simConfig_BOARD_BootClockRUN =
   \                     simConfig_BOARD_BootClockRUN:
   \        0x0   0x01 0x02          DC8 1, 2, 0, 0
   \              0x00 0x00    
   \        0x4   0x0001'0000        DC32 65536
    165              {
    166                  .pllFllSel = SIM_PLLFLLSEL_MCGPLLCLK_CLK, /* PLLFLL select: MCGPLLCLK clock */
    167                  .er32kSrc = SIM_OSC32KSEL_RTC32KCLK_CLK,  /* OSC32KSEL select: RTC32KCLK clock (32.768kHz) */
    168                  .clkdiv1 = 0x10000U,                      /* SIM_CLKDIV1 - OUTDIV1: /1, OUTDIV2: /1, OUTDIV4: /2 */
    169              };

   \                                 In section .rodata, align 4
    170          const osc_config_t oscConfig_BOARD_BootClockRUN =
   \                     oscConfig_BOARD_BootClockRUN:
   \        0x0   0x003D'0900        DC32 4000000
   \        0x4   0x00 0x04          DC8 0, 4, 160, 0
   \              0xA0 0x00    
    171              {
    172                  .freq = 4000000U,                         /* Oscillator frequency: 4000000Hz */
    173                  .capLoad = (OSC_CAP0P),                   /* Oscillator capacity load: 0pF */
    174                  .workMode = kOSC_ModeOscLowPower,         /* Oscillator low power */
    175                  .oscerConfig =
    176                      {
    177                          .enableMode = kOSC_ErClkEnable | kOSC_ErClkEnableInStop,/* Enable external reference clock, enable external reference clock in STOP mode */
    178                      }
    179              };
    180          
    181          /*******************************************************************************
    182           * Code for BOARD_BootClockRUN configuration
    183           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    184          void BOARD_BootClockRUN(void)
    185          {
   \                     BOARD_BootClockRUN: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    186              /* Set the system clock dividers in SIM to safe value. */
    187              CLOCK_SetSimSafeDivs();
   \        0x2   0x.... 0x....      BL       CLOCK_SetSimSafeDivs
    188              /* Call to user function which configures Modem CLK_OUT according to user's needs.
    189                 The subsequent code may be dependent on the proper configuration on Modem. */
    190              setModemClock();
   \        0x6   0x.... 0x....      BL       setModemClock
    191              /* Initializes OSC0 according to board configuration. */
    192              CLOCK_InitOsc0(&oscConfig_BOARD_BootClockRUN);
   \        0xA   0x....             LDR.N    R0,??DataTable4_3
   \        0xC   0x.... 0x....      BL       CLOCK_InitOsc0
    193              CLOCK_SetXtal0Freq(oscConfig_BOARD_BootClockRUN.freq);
   \       0x10   0x....             LDR.N    R0,??DataTable4_4  ;; 0x3d0900
   \       0x12   0x.... 0x....      BL       CLOCK_SetXtal0Freq
    194              /* Configure FLL external reference divider (FRDIV). */
    195              CLOCK_CONFIG_SetFllExtRefDiv(mcgConfig_BOARD_BootClockRUN.frdiv);
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x.... 0x....      BL       CLOCK_CONFIG_SetFllExtRefDiv
    196              /* Set MCG to PEE mode. */
    197              CLOCK_BootToPeeMode(mcgConfig_BOARD_BootClockRUN.oscsel,
    198                                  kMCG_PllClkSelPll0,
    199                                  &mcgConfig_BOARD_BootClockRUN.pll0Config);
   \       0x1C   0x....             LDR.N    R2,??DataTable4_5
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x4608             MOV      R0,R1
   \       0x22   0x.... 0x....      BL       CLOCK_BootToPeeMode
    200              /* Configure the Internal Reference clock (MCGIRCLK). */
    201              CLOCK_SetInternalRefClkConfig(mcgConfig_BOARD_BootClockRUN.irclkEnableMode,
    202                                            mcgConfig_BOARD_BootClockRUN.ircs, 
    203                                            mcgConfig_BOARD_BootClockRUN.fcrdiv);
   \       0x26   0x2200             MOVS     R2,#+0
   \       0x28   0x4611             MOV      R1,R2
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0x.... 0x....      BL       CLOCK_SetInternalRefClkConfig
    204              /* Set the clock configuration in SIM module. */
    205              CLOCK_SetSimConfig(&simConfig_BOARD_BootClockRUN);
   \       0x30   0x....             LDR.N    R0,??DataTable4_6
   \       0x32   0x.... 0x....      BL       CLOCK_SetSimConfig
    206              /* Set SystemCoreClock variable. */
    207              SystemCoreClock = BOARD_BOOTCLOCKRUN_CORE_CLOCK;
   \       0x36   0x....             LDR.N    R0,??DataTable4_7  ;; 0x2dc6c00
   \       0x38   0x....             LDR.N    R1,??DataTable4_8
   \       0x3A   0x6008             STR      R0,[R1, #+0]
    208          }
   \       0x3C   0xBD01             POP      {R0,PC}          ;; return
    209          
    210          /*******************************************************************************
    211           ********************* Configuration BOARD_BootClockVLPR ***********************
    212           ******************************************************************************/
    213          /* TEXT BELOW IS USED AS SETTING FOR THE CLOCKS TOOL *****************************
    214          !!Configuration
    215          name: BOARD_BootClockVLPR
    216          outputs:
    217          - {id: Bus_clock.outFreq, value: 4 MHz}
    218          - {id: Core_clock.outFreq, value: 4 MHz}
    219          - {id: Flash_clock.outFreq, value: 800 kHz}
    220          - {id: LPO_clock.outFreq, value: 1 kHz}
    221          - {id: MCGIRCLK.outFreq, value: 4 MHz}
    222          - {id: System_clock.outFreq, value: 4 MHz}
    223          settings:
    224          - {id: MCGMode, value: BLPI}
    225          - {id: powerMode, value: VLPR}
    226          - {id: MCG.CLKS.sel, value: MCG.IRCS}
    227          - {id: MCG.FCRDIV.scale, value: '1', locked: true}
    228          - {id: MCG.IRCS.sel, value: MCG.FCRDIV}
    229          - {id: MCG_C1_IRCLKEN_CFG, value: Enabled}
    230          - {id: SIM.OSC32KSEL.sel, value: RTC.RTC32KCLK}
    231          - {id: SIM.OUTDIV4.scale, value: '5', locked: true}
    232          sources:
    233          - {id: OSC.OSC.outFreq, value: 4 MHz}
    234           * BE CAREFUL MODIFYING THIS COMMENT - IT IS YAML SETTINGS FOR THE CLOCKS TOOL **/
    235          
    236          /*******************************************************************************
    237           * Variables for BOARD_BootClockVLPR configuration
    238           ******************************************************************************/

   \                                 In section .rodata, align 4
    239          const mcg_config_t mcgConfig_BOARD_BootClockVLPR =
   \                     mcgConfig_BOARD_BootClockVLPR:
   \        0x0   0x02 0x02          DC8 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    240              {
    241                  .mcgMode = kMCG_ModeBLPI,                 /* BLPI - Bypassed Low Power Internal */
    242                  .irclkEnableMode = kMCG_IrclkEnable,      /* MCGIRCLK enabled, MCGIRCLK disabled in STOP mode */
    243                  .ircs = kMCG_IrcFast,                     /* Fast internal reference clock selected */
    244                  .fcrdiv = 0x0U,                           /* Fast IRC divider: divided by 1 */
    245                  .frdiv = 0x0U,                            /* FLL reference clock divider: divided by 1 */
    246                  .drs = kMCG_DrsLow,                       /* Low frequency range */
    247                  .dmx32 = kMCG_Dmx32Default,               /* DCO has a default range of 25% */
    248                  .oscsel = kMCG_OscselOsc,                 /* Selects System Oscillator (OSCCLK) */
    249                  .pll0Config =
    250                      {
    251                          .enableMode = MCG_PLL_DISABLE,    /* MCGPLLCLK disabled */
    252                          .prdiv = 0x0U,                    /* PLL Reference divider: divided by 1 */
    253                          .vdiv = 0x0U,                     /* VCO divider: multiplied by 24 */
    254                      },
    255              };

   \                                 In section .rodata, align 4
    256          const sim_clock_config_t simConfig_BOARD_BootClockVLPR =
   \                     simConfig_BOARD_BootClockVLPR:
   \        0x0   0x00 0x02          DC8 0, 2, 0, 0
   \              0x00 0x00    
   \        0x4   0x0004'0000        DC32 262144
    257              {
    258                  .pllFllSel = SIM_PLLFLLSEL_MCGFLLCLK_CLK, /* PLLFLL select: MCGFLLCLK clock */
    259                  .er32kSrc = SIM_OSC32KSEL_RTC32KCLK_CLK,  /* OSC32KSEL select: RTC32KCLK clock (32.768kHz) */
    260                  .clkdiv1 = 0x40000U,                      /* SIM_CLKDIV1 - OUTDIV1: /1, OUTDIV2: /1, OUTDIV4: /5 */
    261              };

   \                                 In section .rodata, align 4
    262          const osc_config_t oscConfig_BOARD_BootClockVLPR =
   \                     oscConfig_BOARD_BootClockVLPR:
   \        0x0   0x0000'0000        DC32 0
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    263              {
    264                  .freq = 0U,                               /* Oscillator frequency: 0Hz */
    265                  .capLoad = (OSC_CAP0P),                   /* Oscillator capacity load: 0pF */
    266                  .workMode = kOSC_ModeExt,                 /* Use external clock */
    267                  .oscerConfig =
    268                      {
    269                          .enableMode = OSC_ER_CLK_DISABLE, /* Disable external reference clock */
    270                      }
    271              };
    272          
    273          /*******************************************************************************
    274           * Code for BOARD_BootClockVLPR configuration
    275           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    276          void BOARD_BootClockVLPR(void)
    277          {
   \                     BOARD_BootClockVLPR: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    278              /* Set the system clock dividers in SIM to safe value. */
    279              CLOCK_SetSimSafeDivs();
   \        0x2   0x.... 0x....      BL       CLOCK_SetSimSafeDivs
    280              /* Set MCG to BLPI mode. */
    281              CLOCK_BootToBlpiMode(mcgConfig_BOARD_BootClockVLPR.fcrdiv,
    282                                   mcgConfig_BOARD_BootClockVLPR.ircs,
    283                                   mcgConfig_BOARD_BootClockVLPR.irclkEnableMode);
   \        0x6   0x2202             MOVS     R2,#+2
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x.... 0x....      BL       CLOCK_BootToBlpiMode
    284              /* Set the clock configuration in SIM module. */
    285              CLOCK_SetSimConfig(&simConfig_BOARD_BootClockVLPR);
   \       0x10   0x....             LDR.N    R0,??DataTable4_9
   \       0x12   0x.... 0x....      BL       CLOCK_SetSimConfig
    286              /* Set VLPR power mode. */
    287              SMC_SetPowerModeProtection(SMC, kSMC_AllowPowerModeAll);
   \       0x16   0x....             LDR.N    R4,??DataTable4_10  ;; 0x4007e000
   \       0x18   0x212A             MOVS     R1,#+42
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x.... 0x....      BL       SMC_SetPowerModeProtection
    288          #if (defined(FSL_FEATURE_SMC_HAS_LPWUI) && FSL_FEATURE_SMC_HAS_LPWUI)
    289              SMC_SetPowerModeVlpr(SMC, false);
   \       0x20   0x2100             MOVS     R1,#+0
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x.... 0x....      BL       SMC_SetPowerModeVlpr
    290          #else
    291              SMC_SetPowerModeVlpr(SMC);
    292          #endif
    293              while (SMC_GetPowerModeState(SMC) != kSMC_PowerStateVlpr)
   \                     ??BOARD_BootClockVLPR_0: (+1)
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x.... 0x....      BL       SMC_GetPowerModeState
   \       0x2E   0x2804             CMP      R0,#+4
   \       0x30   0xD1FA             BNE.N    ??BOARD_BootClockVLPR_0
    294              {
    295              }
    296              /* Set SystemCoreClock variable. */
    297              SystemCoreClock = BOARD_BOOTCLOCKVLPR_CORE_CLOCK;
   \       0x32   0x....             LDR.N    R0,??DataTable4_4  ;; 0x3d0900
   \       0x34   0x....             LDR.N    R1,??DataTable4_8
   \       0x36   0x6008             STR      R0,[R1, #+0]
    298          }
   \       0x38   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x4004'8044        DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     g_xtal0Freq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x4006'4000        DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     oscConfig_BOARD_BootClockRUN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     mcgConfig_BOARD_BootClockRUN+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     simConfig_BOARD_BootClockRUN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x02DC'6C00        DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x....'....        DC32     simConfig_BOARD_BootClockVLPR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x4007'E000        DC32     0x4007e000
    299          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BOARD_BootClockRUN
         8   -> CLOCK_BootToPeeMode
         8   -> CLOCK_CONFIG_SetFllExtRefDiv
         8   -> CLOCK_InitOsc0
         8   -> CLOCK_SetInternalRefClkConfig
         8   -> CLOCK_SetSimConfig
         8   -> CLOCK_SetSimSafeDivs
         8   -> CLOCK_SetXtal0Freq
         8   -> setModemClock
       8   BOARD_BootClockVLPR
         8   -> CLOCK_BootToBlpiMode
         8   -> CLOCK_SetSimConfig
         8   -> CLOCK_SetSimSafeDivs
         8   -> SMC_GetPowerModeState
         8   -> SMC_SetPowerModeProtection
         8   -> SMC_SetPowerModeVlpr
       0   CLOCK_CONFIG_SetFllExtRefDiv
       0   CLOCK_SetSimSafeDivs
       0   CLOCK_SetXtal0Freq
       0   SMC_GetPowerModeState
       0   SMC_SetPowerModeProtection


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      62  BOARD_BootClockRUN
      58  BOARD_BootClockVLPR
      20  CLOCK_CONFIG_SetFllExtRefDiv
      10  CLOCK_SetSimSafeDivs
       6  CLOCK_SetXtal0Freq
       4  SMC_GetPowerModeState
       4  SMC_SetPowerModeProtection
      12  mcgConfig_BOARD_BootClockRUN
      12  mcgConfig_BOARD_BootClockVLPR
       8  oscConfig_BOARD_BootClockRUN
       8  oscConfig_BOARD_BootClockVLPR
       8  simConfig_BOARD_BootClockRUN
       8  simConfig_BOARD_BootClockVLPR

 
  56 bytes in section .rodata
 208 bytes in section .text
 
 208 bytes of CODE  memory
  56 bytes of CONST memory

Errors: none
Warnings: none
